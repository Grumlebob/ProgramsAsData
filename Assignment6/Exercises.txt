Exercise 7.1 Download microc.zip from the book homepage, unpack it to a
folder MicroC, and build the micro-C interpreter as explained in README.TXT
step (A).
Run the fromFile parser on the micro-C example in source file ex1.c. In
your solution to the exercise, include the abstract syntax tree and indicate its parts:
declarations, statements, types and expressions.
Run the interpreter on some of the micro-C examples provided, such as those in
source files ex1.c and ex11.c. Note that both take an integer n as input. The
former program prints the numbers from n down to 1; the latter finds all solutions to
the n-queens problem.

Example 1:
  Prog		//Declaration 
    [Fundec	//Declaration
       (None, "main", [(TypI, "n")], //Declaration, no return type, input type of Integer
        Block //Statement
          [Stmt //Statement
             (While //Statement
                (Prim2 (">", Access (AccVar "n"), CstI 0), //Expression, bool
                 Block //Statement
                   [Stmt (Expr (Prim1 ("printi", Access (AccVar "n")))); //access Expression of int inside statement
                    Stmt //Statement
                      (Expr 
                         (Assign
                            (AccVar "n",
                             Prim2 ("-", Access (AccVar "n"), CstI 1))))])); //Assign Expression of int inside statement
           Stmt (Expr (Prim1 ("printc", CstI 10)))])] //statement, with expression inside of type int


Example 2:

  Prog		//Declaration 
    [Fundec	//Declaration
       (None, "main", [(TypI, "n")], //Declaration, no return type, input type of Integer
        Block //Statement
          [Dec (TypI, "r"); //Declaration
           Stmt (Expr (Assign (AccVar "r", Access (AccVar "n")))); //Acces expr int inside Assign expr inside Statement
           Stmt //Statement
             (Block //Statement
                [Dec (TypI, "r"); //Declaration
                 Stmt //Statement
                   (Expr
                      (Call
                         ("square", [Access (AccVar "n"); Addr (AccVar "r")]))); //call expression with params "n" and "r" inside statement
                 Stmt (Expr (Prim1 ("printi", Access (AccVar "r"))))]); //Print expr inside statement
           Stmt (Expr (Prim1 ("printi", Access (AccVar "r"))))]); //Print expr inside statement
     Fundec
       (None, "square", [(TypI, "i"); (TypP TypI, "rp")], //Declaration, no return type, input type of Integer and integer pointer
        Block //Statement
          [Stmt
             (Expr
                (Assign
                   (AccDeref (Access (AccVar "rp")), //expression of int
                    Prim2 ("*", Access (AccVar "i"), Access (AccVar "i")))))])] //expression of int, both inside statement


Exercise 7.2 Write and run a few more micro-C programs to understand the use of
arrays, pointer arithmetics, and parameter passing. Use the micro-C implementation
in Interp.fs and the associated lexer and parser to run your programs, as in
Exercise 7.1.
Be careful: there is no type checking in the micro-C interpreter and nothing prevents
you from overwriting arbitrary store locations by mistake, causing your program
to produce unexpected results. (The type system of real C would catch some
of those mistakes at compile time).
(i) Write a micro-C program containing a function void arrsum(int n, int
arr[], int *sump) that computes and returns the sum of the first n elements
of the given array arr. The result must be returned through the sump pointer. The
program’s main function must create an array holding the four numbers 7, 13, 9, 8,
call function arrsum on that array, and print the result using micro-C’s non-standard
print statement.
Remember that MicroC is very limited compared to actual C: You cannot use
initializers in variable declarations like "int i=0;" but must use a declaration
followed by a statement, as in "int i; i=0;" instead; there is nofor-loop (unless
you implement one, see Exercise 7.3); and so on.
Also remember to initialize all variables and array elements; this doesn’t happen
automatically in micro-C or C.

See Exercise72One.c + Exercise72Two.c + Exercise72Three.c  for the solution


Exercise 7.3 Extend MicroC with a for-loop, permitting for instance
for (i=0; i<100; i=i+1)
    sum = sum+i;
To do this, you must modify the lexer and parser specifications in 
CLex.fsl and
CPar.fsy. 
You may also extend the micro-C abstract syntax in 
Absyn.fs by
defining a new statement constructor Forloop in the stmt type, and add a suitable
case to the exec function in the interpreter.
But actually, with a modest amount of cleverness (highly recommended), you do
not need to introduce special abstract syntax for for-loops, and need not modify the
interpreter at all. Namely, a for-loop of the general form

for (e1; e2; e3)
    stmt
is equivalent to a block
{       //block
    e1; //expression
        while (e2) {    //while statement
        stmt            //statement
        e3;             //expression
    }
}
Hence it suffices to let the semantic action ... in the parser construct abstract
syntax using the existing Block, While, and Expr constructors from the stmt
type.
Rewrite your programs from Exercise 7.2 to use for-loops instead of while-loops.

See Exercise73One.c + Exercise73Two.c + Exercise73Three.c  for the solution

Exercise 7.4 Extend the micro-C abstract syntax in Absyn.fs with the preincrement
and predecrement operators known from C, C++, Java, and C#:
type expr =
...
| PreInc of access (* C/C++/Java/C# ++i or ++a[e] *)
| PreDec of access (* C/C++/Java/C# --i or --a[e] *)
Note that the predecrement and preincrement operators work on lvalues, that is,
variables and array elements, and more generally on any expression that evaluates
to a location.
Modify the micro-C interpreter in 
Interp.fs to handle PreInc and PreDec.
You will need to modify the 
eval function, and use the getSto and setSto store
operations (Sect. 7.3).

See Absyn.fs and Interp.fs for the solution

Exercise 7.5 Extend the micro-C lexer and parser to accept ++e and –e also, and
to build the corresponding abstract syntax.

See CLex.fsl and CPar.fsy for the solution

> run (fromFile "Exercise75.c") [8];;
9 10 val it: Interp.store = map [(0, 8); (1, 10)]
