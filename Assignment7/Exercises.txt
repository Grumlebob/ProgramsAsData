Exercise 8.1 Download microc.zip from the book homepage, unpack it to a
folder MicroC, and build the micro-C compiler as explained in README.TXT step (B).
(i) As a warm-up, compile one of the micro-C examples provided, such as that in
source file ex11.c, then run it using the abstract machine implemented in Java,
as described also in step (B) of the README file. When run with command line
argument 8, the program prints the 92 solutions to the eight queens problem: how to
place eight queens on a chessboard so that none of them can attack any of the others.

> compile "ex11";;
val it: Machine.instr list =
  [LDARGS; CALL (1, "L1"); STOP; Label "L1"; INCSP 1; INCSP 1; INCSP 100;
   GETSP; CSTI 99; SUB; INCSP 100; GETSP; CSTI 99; SUB; INCSP 100; GETSP;
   CSTI 99; SUB; INCSP 100; GETSP; CSTI 99; SUB; GETBP; CSTI 2; ADD; CSTI 1;
   STI; INCSP -1; GOTO "L3"; Label "L2"; GETBP; CSTI 103; ADD; LDI; GETBP;
   CSTI 2; ADD; LDI; ADD; CSTI 0; STI; INCSP -1; GETBP; CSTI 2; ADD; GETBP;
   CSTI 2; ADD; LDI; CSTI 1; ADD; STI; INCSP -1; INCSP 0; Label "L3"; GETBP;
   CSTI 2; ADD; LDI; GETBP; CSTI 0; ADD; LDI; SWAP; LT; NOT; IFNZRO "L2";
   GETBP; CSTI 2; ADD; CSTI 1; STI; INCSP -1; GOTO "L5"; Label "L4"; GETBP;
   CSTI 204; ADD; LDI; GETBP; CSTI 2; ADD; LDI; ADD; GETBP; CSTI 305; ADD; LDI;
   GETBP; CSTI 2; ADD; LDI; ADD; CSTI 0; STI; STI; INCSP -1; GETBP; CSTI 2;
   ADD; ...]

> #q;;
> javac .\Machine.java
> java Machine ex11.out 8
1 5 8 6 3 7 2 4
1 6 8 3 7 4 2 5
1 7 4 6 8 2 5 3
1 7 5 8 2 4 6 3
2 4 6 8 3 1 7 5
2 5 7 1 3 8 6 4
2 5 7 4 1 8 6 3
2 6 1 7 4 8 3 5
2 6 8 3 1 4 7 5
2 7 3 6 8 5 1 4
2 7 5 8 1 4 6 3
2 8 6 1 3 5 7 4
3 1 7 5 8 2 4 6
3 5 2 8 1 7 4 6
3 5 2 8 6 4 7 1
3 5 7 1 4 2 8 6
3 5 8 4 1 7 2 6
3 6 2 5 8 1 7 4
3 6 2 7 1 4 8 5
3 6 2 7 5 1 8 4
3 6 4 1 8 5 7 2
3 6 4 2 8 5 7 1
3 6 8 1 4 7 5 2
3 6 8 1 5 7 2 4
3 6 8 2 4 1 7 5
3 7 2 8 5 1 4 6
3 7 2 8 6 4 1 5
3 8 4 7 1 6 2 5
4 1 5 8 2 7 3 6
4 1 5 8 6 3 7 2
4 2 5 8 6 1 3 7
4 2 7 3 6 8 1 5
4 2 7 3 6 8 5 1
4 2 7 5 1 8 6 3
4 2 8 5 7 1 3 6
4 2 8 6 1 3 5 7
4 6 1 5 2 8 3 7
4 6 8 2 7 1 3 5
4 6 8 3 1 7 5 2
4 7 1 8 5 2 6 3
4 7 3 8 2 5 1 6
4 7 5 2 6 1 3 8
4 7 5 3 1 6 8 2
4 8 1 3 6 2 7 5
4 8 1 5 7 2 6 3
4 8 5 3 1 7 2 6
5 1 4 6 8 2 7 3
5 1 8 4 2 7 3 6
5 1 8 6 3 7 2 4
5 2 4 6 8 3 1 7
5 2 4 7 3 8 6 1
5 2 6 1 7 4 8 3
5 2 8 1 4 7 3 6
5 3 1 6 8 2 4 7
5 3 1 7 2 8 6 4
5 3 8 4 7 1 6 2
5 7 1 3 8 6 4 2
5 7 1 4 2 8 6 3
5 7 2 4 8 1 3 6
5 7 2 6 3 1 4 8
5 7 2 6 3 1 8 4
5 7 4 1 3 8 6 2
5 8 4 1 3 6 2 7
5 8 4 1 7 2 6 3
6 1 5 2 8 3 7 4
6 2 7 1 3 5 8 4
6 2 7 1 4 8 5 3
6 3 1 7 5 8 2 4
6 3 1 8 4 2 7 5
6 3 1 8 5 2 4 7
6 3 5 7 1 4 2 8
6 3 5 8 1 4 2 7
6 3 7 2 4 8 1 5
6 3 7 2 8 5 1 4
6 3 7 4 1 8 2 5
6 4 1 5 8 2 7 3
6 4 2 8 5 7 1 3
6 4 7 1 3 5 2 8
6 4 7 1 8 2 5 3
6 8 2 4 1 7 5 3
7 1 3 8 6 4 2 5
7 2 4 1 8 5 3 6
7 2 6 3 1 4 8 5
7 3 1 6 8 5 2 4
7 3 8 2 5 1 6 4
7 4 2 5 8 1 3 6
7 4 2 8 6 1 3 5
7 5 3 1 6 8 2 4
8 2 4 1 7 5 3 6
8 2 5 3 1 7 4 6
8 3 1 6 2 5 7 4
8 4 1 3 6 2 7 5



(ii) Now compile the example micro-C programs 
ex3.c and ex5.c using functions compileToFile and fromFile from ParseAndComp.fs as above.
Study the generated symbolic bytecode. Write up the bytecode in a more structured
way with labels only at the beginning of the line (as in this chapter). Write the
corresponding micro-C code to the right of the stack machine code. Note that ex5.c
has a nested scope (a block ... inside a function body); how is that visible in the
generated code?
Execute the compiled programs using java Machine ex3.out 10 and
similar. Note that these micro-C programs require a command line argument (an
integer) when they are executed.
Trace the execution using java Machinetrace ex3.out 4, and explain
the stack contents and what goes on in each step of execution, and especially how the
low-level bytecode instructions map to the higher-level features of MicroC. You can
capture the standard output from a command prompt (in a file ex3trace.txt)
using the Unix-style notation:

[ 4 -999 4 0 ]{16: GOTO 43} //16 is place in stack.
[ 4 -999 4 0 ]{43: GETBP}   //43 is place in stack.


ex3.c:
void main(int n) { 
  int i; 
  i=0; 
  while (i < n) { 
    print i; 
    i=i+1;
  } 
}

We know that assignment asks for arg of 4, but since this is simply a for i loop, an input of 2 is sufficient to explain the instructions.
> java Machinetrace ex3.out 2
[ ]{0: LDARGS}                           | Puts argument on top of stack (2)
[ 2 ]{1: CALL 1 5}                       | Call main with 1 argument (top value of stack) at address/label 5
[ 4 -999 2 ]{5: INCSP 1}                 | Return address is 4, old basepointer is -999 (because no stack frames), 2 is our value. INCSP 1, allocates 1 place on our stack
[ 4 -999 2 0 ]{7: GETBP}                 | Put base pointer on top of stack (address 2 is added. 2 is because that is the start of our new stack frame, after 4 (index 0) and -999 (index 1))
[ 4 -999 2 0 2 ]{8: CSTI 1}              | push value 1 on top of stack
[ 4 -999 2 0 2 1 ]{10: ADD}              | Add two top values together (base pointer 2 + 1) = 3
[ 4 -999 2 0 3 ]{11: CSTI 0}             | Push 0 to top of stack
[ 4 -999 2 0 3 0 ]{13: STI}              | Put top value, into second top place. Meaning store 0 at index 3.
[ 4 -999 2 0 0 ]{14: INCSP -1}           | Deallocate 1 place in the stack.
[ 4 -999 2 0 ]{16: GOTO 43}              | Start of while loop.
[ 4 -999 2 0 ]{43: GETBP}                | Get basepointer of 2 (We are still in same main function)
[ 4 -999 2 0 2 ]{44: CSTI 1}             | Push 1 to top
[ 4 -999 2 0 2 1 ]{46: ADD}              | Add 1 to basepointer
[ 4 -999 2 0 3 ]{47: LDI}                | Top stack value is loaded at stack[index] (load value at stack 3), to top of stack.
[ 4 -999 2 0 0 ]{48: GETBP}              | At previous, we loaded 0 to top of stack. Now we get base pointer again, of 2 and push to stack
[ 4 -999 2 0 0 2 ]{49: CSTI 0}           | push 0 to top
[ 4 -999 2 0 0 2 0 ]{51: ADD}            | Add 0 to stack pointer
[ 4 -999 2 0 0 2 ]{52: LDI}              | Top stack value is loaded at stack[index] (load value at stack 2), to top of stack.
[ 4 -999 2 0 0 2 ]{53: LT}               | Check if 0 is less than 2
[ 4 -999 2 0 1 ]{54: IFNZRO 18}          | IF previous was not false (aka !0), then jump to address/label 18
[ 4 -999 2 0 ]{18: GETBP}                | Because previous was true, we jump to 18, which is get base pointer
[ 4 -999 2 0 2 ]{19: CSTI 1}             | Basepointer 2 was added to top of stack, and we push 1 to top of stack
[ 4 -999 2 0 2 1 ]{21: ADD}              | Add 1 to basepointer //adding 1 to basepointer, is because 1 is the offset needed to get variable i
[ 4 -999 2 0 3 ]{22: LDI}                | load s[3] to top of stack (which is value 0)
[ 4 -999 2 0 0 ]{23: PRINTI}             | Print top of stack (which is 0) 
0 [ 4 -999 2 0 0 ]{24: INCSP -1}         | The 0 at very left, is from print statement above (not part of stack!). Now deallocate 1 space in stack.
[ 4 -999 2 0 ]{26: GETBP}               |
[ 4 -999 2 0 2 ]{27: CSTI 1}            | This is the same as block above. Except in block above it did i+0
[ 4 -999 2 0 2 1 ]{29: ADD}             | Except in this block, we increment by 1
[ 4 -999 2 0 3 ]{30: GETBP}             |
[ 4 -999 2 0 3 2 ]{31: CSTI 1}          |
[ 4 -999 2 0 3 2 1 ]{33: ADD}           |
[ 4 -999 2 0 3 3 ]{34: LDI}             |
[ 4 -999 2 0 3 0 ]{35: CSTI 1}          |  //This is i=i+1;
[ 4 -999 2 0 3 0 1 ]{37: ADD}           |
[ 4 -999 2 0 3 1 ]{38: STI}             |  //Stores new i, for future loops.
[ 4 -999 2 1 1 ]{39: INCSP -1}           | 
[ 4 -999 2 1 ]{41: INCSP 0}              |
[ 4 -999 2 1 ]{43: GETBP}                |
[ 4 -999 2 1 2 ]{44: CSTI 1}             |
[ 4 -999 2 1 2 1 ]{46: ADD}              |  //adding 1 to basepointer, is because 1 is the offset needed to get variable i
[ 4 -999 2 1 3 ]{47: LDI}                | 
[ 4 -999 2 1 1 ]{48: GETBP}              |
[ 4 -999 2 1 1 2 ]{49: CSTI 0}           |
[ 4 -999 2 1 1 2 0 ]{51: ADD}            |
[ 4 -999 2 1 1 2 ]{52: LDI}              | if i<n
[ 4 -999 2 1 1 2 ]{53: LT}               |
[ 4 -999 2 1 1 ]{54: IFNZRO 18}          | 
[ 4 -999 2 1 ]{18: GETBP}                |
[ 4 -999 2 1 2 ]{19: CSTI 1}             |
[ 4 -999 2 1 2 1 ]{21: ADD}              |
[ 4 -999 2 1 3 ]{22: LDI}                |
[ 4 -999 2 1 1 ]{23: PRINTI}             |
1 [ 4 -999 2 1 1 ]{24: INCSP -1}         |
[ 4 -999 2 1 ]{26: GETBP}               | 
[ 4 -999 2 1 2 ]{27: CSTI 1}            |
[ 4 -999 2 1 2 1 ]{29: ADD}             |
[ 4 -999 2 1 3 ]{30: GETBP}             |
[ 4 -999 2 1 3 2 ]{31: CSTI 1}          |
[ 4 -999 2 1 3 2 1 ]{33: ADD}           |
[ 4 -999 2 1 3 3 ]{34: LDI}             |
[ 4 -999 2 1 3 1 ]{35: CSTI 1}          | i = i+1
[ 4 -999 2 1 3 1 1 ]{37: ADD}           |
[ 4 -999 2 1 3 2 ]{38: STI}             | 
[ 4 -999 2 2 2 ]{39: INCSP -1}           |
[ 4 -999 2 2 ]{41: INCSP 0}              |
[ 4 -999 2 2 ]{43: GETBP}                | 
[ 4 -999 2 2 2 ]{44: CSTI 1}             |
[ 4 -999 2 2 2 1 ]{46: ADD}              | 
[ 4 -999 2 2 3 ]{47: LDI}                |
[ 4 -999 2 2 2 ]{48: GETBP}              | Gets previous i (2)
[ 4 -999 2 2 2 2 ]{49: CSTI 0}           |
[ 4 -999 2 2 2 2 0 ]{51: ADD}            |
[ 4 -999 2 2 2 2 ]{52: LDI}              |
[ 4 -999 2 2 2 2 ]{53: LT}               | i < n is now false, because i = n
[ 4 -999 2 2 0 ]{54: IFNZRO 18}           | Therefore no jump to address 18
[ 4 -999 2 2 ]{56: INCSP -1}              | Deallocate thew boolean
[ 4 -999 2 ]{58: RET 0}                   | Now value is top of stack. Return 0, means it returns 0 variables
[ 2 ]{4: STOP}                            | No more instructions


java Machinetrace ex3.out 4 > ex3trace.txt

> java .\Machine.java ex3.out 10
0 1 2 3 4 5 6 7 8 9

Note: the -999 is old base pointer. But since there is no additional stack frames, there is no old base pointer
ex3trace.txt: 
[ ]{0: LDARGS}
[ 4 ]{1: CALL 1 5}
[ 4 -999 4 ]{5: INCSP 1}
[ 4 -999 4 0 ]{7: GETBP}
[ 4 -999 4 0 2 ]{8: CSTI 1}
[ 4 -999 4 0 2 1 ]{10: ADD}
[ 4 -999 4 0 3 ]{11: CSTI 0}
[ 4 -999 4 0 3 0 ]{13: STI}
[ 4 -999 4 0 0 ]{14: INCSP -1}
[ 4 -999 4 0 ]{16: GOTO 43}
[ 4 -999 4 0 ]{43: GETBP}
[ 4 -999 4 0 2 ]{44: CSTI 1}
[ 4 -999 4 0 2 1 ]{46: ADD}
[ 4 -999 4 0 3 ]{47: LDI}
[ 4 -999 4 0 0 ]{48: GETBP}
[ 4 -999 4 0 0 2 ]{49: CSTI 0}
[ 4 -999 4 0 0 2 0 ]{51: ADD}
[ 4 -999 4 0 0 2 ]{52: LDI}
[ 4 -999 4 0 0 4 ]{53: LT}
[ 4 -999 4 0 1 ]{54: IFNZRO 18}
[ 4 -999 4 0 ]{18: GETBP}
[ 4 -999 4 0 2 ]{19: CSTI 1}
[ 4 -999 4 0 2 1 ]{21: ADD}
[ 4 -999 4 0 3 ]{22: LDI}
[ 4 -999 4 0 0 ]{23: PRINTI}
0 [ 4 -999 4 0 0 ]{24: INCSP -1}
[ 4 -999 4 0 ]{26: GETBP}
[ 4 -999 4 0 2 ]{27: CSTI 1}
[ 4 -999 4 0 2 1 ]{29: ADD}
[ 4 -999 4 0 3 ]{30: GETBP}
[ 4 -999 4 0 3 2 ]{31: CSTI 1}
[ 4 -999 4 0 3 2 1 ]{33: ADD}
[ 4 -999 4 0 3 3 ]{34: LDI}
[ 4 -999 4 0 3 0 ]{35: CSTI 1}
[ 4 -999 4 0 3 0 1 ]{37: ADD}
[ 4 -999 4 0 3 1 ]{38: STI}
[ 4 -999 4 1 1 ]{39: INCSP -1}
[ 4 -999 4 1 ]{41: INCSP 0}
[ 4 -999 4 1 ]{43: GETBP}
[ 4 -999 4 1 2 ]{44: CSTI 1}
[ 4 -999 4 1 2 1 ]{46: ADD}
[ 4 -999 4 1 3 ]{47: LDI}
[ 4 -999 4 1 1 ]{48: GETBP}
[ 4 -999 4 1 1 2 ]{49: CSTI 0}
[ 4 -999 4 1 1 2 0 ]{51: ADD}
[ 4 -999 4 1 1 2 ]{52: LDI}
[ 4 -999 4 1 1 4 ]{53: LT}
[ 4 -999 4 1 1 ]{54: IFNZRO 18}
[ 4 -999 4 1 ]{18: GETBP}
[ 4 -999 4 1 2 ]{19: CSTI 1}
[ 4 -999 4 1 2 1 ]{21: ADD}
[ 4 -999 4 1 3 ]{22: LDI}
[ 4 -999 4 1 1 ]{23: PRINTI}
1 [ 4 -999 4 1 1 ]{24: INCSP -1}
[ 4 -999 4 1 ]{26: GETBP}
[ 4 -999 4 1 2 ]{27: CSTI 1}
[ 4 -999 4 1 2 1 ]{29: ADD}
[ 4 -999 4 1 3 ]{30: GETBP}
[ 4 -999 4 1 3 2 ]{31: CSTI 1}
[ 4 -999 4 1 3 2 1 ]{33: ADD}
[ 4 -999 4 1 3 3 ]{34: LDI}
[ 4 -999 4 1 3 1 ]{35: CSTI 1}
[ 4 -999 4 1 3 1 1 ]{37: ADD}
[ 4 -999 4 1 3 2 ]{38: STI}
[ 4 -999 4 2 2 ]{39: INCSP -1}
[ 4 -999 4 2 ]{41: INCSP 0}
[ 4 -999 4 2 ]{43: GETBP}
[ 4 -999 4 2 2 ]{44: CSTI 1}
[ 4 -999 4 2 2 1 ]{46: ADD}
[ 4 -999 4 2 3 ]{47: LDI}
[ 4 -999 4 2 2 ]{48: GETBP}
[ 4 -999 4 2 2 2 ]{49: CSTI 0}
[ 4 -999 4 2 2 2 0 ]{51: ADD}
[ 4 -999 4 2 2 2 ]{52: LDI}
[ 4 -999 4 2 2 4 ]{53: LT}
[ 4 -999 4 2 1 ]{54: IFNZRO 18}
[ 4 -999 4 2 ]{18: GETBP}
[ 4 -999 4 2 2 ]{19: CSTI 1}
[ 4 -999 4 2 2 1 ]{21: ADD}
[ 4 -999 4 2 3 ]{22: LDI}
[ 4 -999 4 2 2 ]{23: PRINTI}
2 [ 4 -999 4 2 2 ]{24: INCSP -1}
[ 4 -999 4 2 ]{26: GETBP}
[ 4 -999 4 2 2 ]{27: CSTI 1}
[ 4 -999 4 2 2 1 ]{29: ADD}
[ 4 -999 4 2 3 ]{30: GETBP}
[ 4 -999 4 2 3 2 ]{31: CSTI 1}
[ 4 -999 4 2 3 2 1 ]{33: ADD}
[ 4 -999 4 2 3 3 ]{34: LDI}
[ 4 -999 4 2 3 2 ]{35: CSTI 1}
[ 4 -999 4 2 3 2 1 ]{37: ADD}
[ 4 -999 4 2 3 3 ]{38: STI}
[ 4 -999 4 3 3 ]{39: INCSP -1}
[ 4 -999 4 3 ]{41: INCSP 0}
[ 4 -999 4 3 ]{43: GETBP}
[ 4 -999 4 3 2 ]{44: CSTI 1}
[ 4 -999 4 3 2 1 ]{46: ADD}
[ 4 -999 4 3 3 ]{47: LDI}
[ 4 -999 4 3 3 ]{48: GETBP}
[ 4 -999 4 3 3 2 ]{49: CSTI 0}
[ 4 -999 4 3 3 2 0 ]{51: ADD}
[ 4 -999 4 3 3 2 ]{52: LDI}
[ 4 -999 4 3 3 4 ]{53: LT}
[ 4 -999 4 3 1 ]{54: IFNZRO 18}
[ 4 -999 4 3 ]{18: GETBP}
[ 4 -999 4 3 2 ]{19: CSTI 1}
[ 4 -999 4 3 2 1 ]{21: ADD}
[ 4 -999 4 3 3 ]{22: LDI}
[ 4 -999 4 3 3 ]{23: PRINTI}
3 [ 4 -999 4 3 3 ]{24: INCSP -1}
[ 4 -999 4 3 ]{26: GETBP}
[ 4 -999 4 3 2 ]{27: CSTI 1}
[ 4 -999 4 3 2 1 ]{29: ADD}
[ 4 -999 4 3 3 ]{30: GETBP}
[ 4 -999 4 3 3 2 ]{31: CSTI 1}
[ 4 -999 4 3 3 2 1 ]{33: ADD}
[ 4 -999 4 3 3 3 ]{34: LDI}
[ 4 -999 4 3 3 3 ]{35: CSTI 1}
[ 4 -999 4 3 3 3 1 ]{37: ADD}
[ 4 -999 4 3 3 4 ]{38: STI}
[ 4 -999 4 4 4 ]{39: INCSP -1}
[ 4 -999 4 4 ]{41: INCSP 0}
[ 4 -999 4 4 ]{43: GETBP}
[ 4 -999 4 4 2 ]{44: CSTI 1}
[ 4 -999 4 4 2 1 ]{46: ADD}
[ 4 -999 4 4 3 ]{47: LDI}
[ 4 -999 4 4 4 ]{48: GETBP}
[ 4 -999 4 4 4 2 ]{49: CSTI 0}
[ 4 -999 4 4 4 2 0 ]{51: ADD}
[ 4 -999 4 4 4 2 ]{52: LDI}
[ 4 -999 4 4 4 4 ]{53: LT}
[ 4 -999 4 4 0 ]{54: IFNZRO 18}
[ 4 -999 4 4 ]{56: INCSP -1}
[ 4 -999 4 ]{58: RET 0}
[ 4 ]{4: STOP}



ex5.c compiled:

[ ]{0: LDARGS}                  |
[ 7 ]{1: CALL 1 5}              | call main with aug (7)
[ 4 -999 7 ]{5: INCSP 1}            | Make room for r
[ 4 -999 7 0 ]{7: GETBP}            |
[ 4 -999 7 0 2 ]{8: CSTI 1}         |
[ 4 -999 7 0 2 1 ]{10: ADD}         |
[ 4 -999 7 0 3 ]{11: GETBP}         |
[ 4 -999 7 0 3 2 ]{12: CSTI 0}   |
[ 4 -999 7 0 3 2 0 ]{14: ADD}    |
[ 4 -999 7 0 3 2 ]{15: LDI}      |
[ 4 -999 7 0 3 7 ]{16: STI}      | Set r to n
[ 4 -999 7 7 7 ]{17: INCSP -1}   |
[ 4 -999 7 7 ]{19: INCSP 1}     |
[ 4 -999 7 7 7 ]{21: GETBP}     | Create new block scope 
[ 4 -999 7 7 7 2 ]{22: CSTI 0}  |
[ 4 -999 7 7 7 2 0 ]{24: ADD}   |
[ 4 -999 7 7 7 2 ]{25: LDI}     |
[ 4 -999 7 7 7 7 ]{26: GETBP}   |
[ 4 -999 7 7 7 7 2 ]{27: CSTI 2}| inner r
[ 4 -999 7 7 7 7 2 2 ]{29: ADD} | address of inner r
[ 4 -999 7 7 7 7 4 ]{30: CALL 2 57}     | call with n value and r address
[ 4 -999 7 7 7 33 2 7 4 ]{57: GETBP}        |
[ 4 -999 7 7 7 33 2 7 4 7 ]{58: CSTI 1}     |
[ 4 -999 7 7 7 33 2 7 4 7 1 ]{60: ADD}      |
[ 4 -999 7 7 7 33 2 7 4 8 ]{61: LDI}        | get augs
[ 4 -999 7 7 7 33 2 7 4 4 ]{62: GETBP}      |
[ 4 -999 7 7 7 33 2 7 4 4 7 ]{63: CSTI 0}   |
[ 4 -999 7 7 7 33 2 7 4 4 7 0 ]{65: ADD}    |
[ 4 -999 7 7 7 33 2 7 4 4 7 ]{66: LDI}      |
[ 4 -999 7 7 7 33 2 7 4 4 7 ]{67: GETBP}        |
[ 4 -999 7 7 7 33 2 7 4 4 7 7 ]{68: CSTI 0}     |
[ 4 -999 7 7 7 33 2 7 4 4 7 7 0 ]{70: ADD}      |
[ 4 -999 7 7 7 33 2 7 4 4 7 7 ]{71: LDI}        | rp* is 4, 7 is i, 7 is i again: rp* = i*i
[ 4 -999 7 7 7 33 2 7 4 4 7 7 ]{72: MUL}        |
[ 4 -999 7 7 7 33 2 7 4 4 49 ]{73: STI}         |
[ 4 -999 7 7 49 33 2 7 4 49 ]{74: INCSP -1}
[ 4 -999 7 7 49 33 2 7 4 ]{76: INCSP 0}
[ 4 -999 7 7 49 33 2 7 4 ]{78: RET 1}
[ 4 -999 7 7 49 4 ]{33: INCSP -1}
[ 4 -999 7 7 49 ]{35: GETBP}        |
[ 4 -999 7 7 49 2 ]{36: CSTI 2}     |
[ 4 -999 7 7 49 2 2 ]{38: ADD}      |
[ 4 -999 7 7 49 4 ]{39: LDI}        |
[ 4 -999 7 7 49 49 ]{40: PRINTI}    | print inner r
49 [ 4 -999 7 7 49 49 ]{41: INCSP -1}   |
[ 4 -999 7 7 49 ]{43: INCSP -1}         | jump out of block
[ 4 -999 7 7 ]{45: GETBP}       |
[ 4 -999 7 7 2 ]{46: CSTI 1}    |
[ 4 -999 7 7 2 1 ]{48: ADD}     |
[ 4 -999 7 7 3 ]{49: LDI}       |
[ 4 -999 7 7 7 ]{50: PRINTI}    | print outer r
7 [ 4 -999 7 7 7 ]{51: INCSP -1}    |
[ 4 -999 7 7 ]{53: INCSP -1}        |
[ 4 -999 7 ]{55: RET 0}             |
[ 7 ]{4: STOP}                      | wrap up and return


Exercise 8.3 This abstract syntax for preincrement ++e and predecrement --e was
introduced in Exercise 7.4:
type expr =
...
| PreInc of access (* C/C++/Java/C# ++i or ++a[e] *)
| PreDec of access (* C/C++/Java/C# --i or --a[e] *)
Modify the compiler 
(function cExpr) to generate code for PreInc(acc) and
PreDec(acc). To parse micro-C source programs containing these expressions,
you also need to modify 
the lexer and parser.
It is tempting to expand ++e to the assignment expression e = e+1, but that
would evaluate e twice, which is wrong. Namely, e may itself have a side effect, as
in ++arr[++i].
Hence e should be computed only once. For instance, ++i should compile
to something like this: <code to compute address of i>, DUP, LDI,
CSTI 1, ADD, STI, where the address of i is computed once and then duplicated.
Write a program to check that this works. If you are brave, try it on expressions of
the form ++arr[++i] and check that i and the elements of arr have the correct
values afterwards.

The following code:
 int a[4];
 a[0] = 7;
 a[1] = 13;
 a[2] = 9;
 a[3] = 8;
 int i;
 i = 0;
 while (i < 3)
 {
  print ++a[++i];
 }

prints "14 10 9", because it increments i from k to k+1 and then accesses the index at k+1 
then increments the returned value before printing.

> compileToFile (fromFile "Exercise83.c") "Exercise83.out";;

val it: Machine.instr list =
  [LDARGS; CALL (1, "L1"); STOP; Label "L1"; INCSP 1; GETBP; CSTI 1; ADD;
   CSTI 10; STI; INCSP -1; GETBP; CSTI 1; ADD; DUP; LDI; CSTI 1; SUB; STI;
   INCSP -1; GETBP; CSTI 1; ADD; LDI; PRINTI; INCSP -1; GETBP; CSTI 1; ADD;
   DUP; LDI; CSTI 1; ADD; STI; INCSP -1; GETBP; CSTI 1; ADD; LDI; PRINTI;
   INCSP -1; INCSP -1; RET 0]

> java Machine Exercise83.out 1
9 10

See files comp.fs, CPar.fsy, CLex.fsl


Exercise 8.4 Compile ex8.c and study the symbolic bytecode to see why it is so
much slower than the handwritten 20 million iterations loop in prog1.

> compileToFile (fromFile "ex8.c") "ex8.out";;
val it: Machine.instr list =
  [LDARGS; CALL (0, "L1"); STOP; Label "L1"; INCSP 1; GETBP; CSTI 0; ADD;
   CSTI 20000000; STI; INCSP -1; GOTO "L3"; Label "L2"; GETBP; CSTI 0; ADD;
   GETBP; CSTI 0; ADD; LDI; CSTI 1; SUB; STI; INCSP -1; INCSP 0; Label "L3";
   GETBP; CSTI 0; ADD; LDI; IFNZRO "L2"; INCSP -1; RET -1]

Compile ex13.c and study the symbolic bytecode to see how loops and conditionals
interact; describe what you see.
In a later chapter we shall see an improved micro-C compiler that generates fewer
extraneous labels and jumps.

Prog1:
0 20000000 16 7 0 1 2 9 18 4 25

0: CSTI 20000000
2: GOTO 7
4: CSTI 1
6: SUB
7: DUP
8: IFNZRO 4
10: STOP

Output/stack looks something like this during executing:
20000000
19999999
19999998
19999997
....
0
STOP

The handwritten program uses the fact that the value to be decremented is on the top of the stack.
It can then just duplicate it and decrement it before doing it again-
The other program uses argument logics to move base and stack pointers and loading and storing values indirectly.
This causes it to have a lot more instructions per iteration, and thus be slower.

Exercise 8.5 Extend the micro-C language, the abstract syntax, the lexer, the parser,
and the compiler 
(comp.fs) to implement conditional expressions of the form (e1 ? e2 : e3).
The compilation of e1 ? e2 : e3 should produce code that evaluates e2 only
if e1 is true and evaluates e3 only if e1 is false. The compilation scheme should
be the same as for the conditional statement if (e) stmt1 else stmt2, but
expression e2 or expression e3 must leave its value on the stack top if evaluated, so
that the entire expression e1 ? e2 : e3 leaves its value on the stack top.

Absyn:
  | Ternary of expr * expr * expr    (* Conditional expression      *)

Clex:
  | ':'             { COLON }
  | '?'             { QUESTIONMARK }  
  
Cpar.fsy:
  | LPAR Expr QUESTIONMARK Expr COLON Expr RPAR { Ternary($2, $4, $6)       }

Comp.fs:
    | Ternary(e1, e2, e3) -> //evaluate e1, if true go to e2 else go to e3
      let labFalse = newLabel() //in case e1 is false
      let labend   = newLabel() //To jump after call
      cExpr e1 varEnv funEnv @ [IFZERO labFalse] //if e1 is false, jump to e3
      @ cExpr e2 varEnv funEnv @ [GOTO labend; Label labFalse] //label False for e3, written ahead of e2 to skip it.
      @ cExpr e3 varEnv funEnv //if e1 is false, we skip previous line.
      @ [Label labend] 


>java Machine Exercise85.out 
5
This correct. The ternary statement is 1 < 5 ? print e2 : print e3;, where e2 is 5 and e3 is 7.

Exercise 8.6
 (SEE SLIDES- DER ER KODE I SLIDES:
 Switch of expr * (int * stmt) list)
Extend the lexer, parser, abstract syntax and compiler to implement
switch statements such as this one:
switch (month) {
case 1:
{ days = 31; }
case 2:
{ days = 28; if (y%4==0) days = 29; }
case 3:
{ days = 31; }
}
Unlike in C, there should be no fall-through from one case to the next: after the
last statement of a case, the code should jump to the end of the switch statement.
The parenthesis after switch must contain an expression. The value after a case
must be an integer constant, and a case must be followed by a statement block. A
switch with n cases can be compiled using n labels, the last of which is at the very
end of the switch. For simplicity, do not implement the break statement or the
default branch.

See Absyn, CPar.fsy, CLex.fsl, Comp.fs, Exercise86.c

> open ParseAndComp;;
> compileToFile (fromFile "Exercise86.c") "Exercise86.out";;
val it: Machine.instr list =
  [LDARGS; CALL (0, "L1"); STOP; Label "L1"; INCSP 1; INCSP 1; INCSP 1; GETBP;
   CSTI 1; ADD; CSTI 2; STI; INCSP -1; GETBP; CSTI 2; ADD; CSTI 4; STI;
   INCSP -1; GETBP; CSTI 1; ADD; LDI; DUP; CSTI 2; SUB; IFNZRO "L3"; GETBP;
   CSTI 0; ADD; CSTI 28; STI; INCSP -1; GETBP; CSTI 2; ADD; LDI; CSTI 4; MOD;
   CSTI 0; EQ; IFZERO "L4"; GETBP; CSTI 0; ADD; CSTI 29; STI; INCSP -1;
   GOTO "L5"; Label "L4"; INCSP 0; Label "L5"; INCSP 0; GOTO "L2"; Label "L3";
   DUP; CSTI 3; SUB; IFNZRO "L6"; GETBP; CSTI 0; ADD; CSTI 31; STI; INCSP -1;
   INCSP 0; GOTO "L2"; Label "L6"; DUP; CSTI 1; SUB; IFNZRO "L7"; GETBP;
   CSTI 0; ADD; CSTI 31; STI; INCSP -1; INCSP 0; GOTO "L2"; Label "L7";
   Label "L2"; INCSP -1; GETBP; CSTI 0; ADD; LDI; PRINTI; INCSP -1; INCSP -3;
   RET -1]

> java Machine .\Exercise86.out
29 

