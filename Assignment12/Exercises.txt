Exercise 13.1 Download microsml.zip from the book homepage, unpack it to
a folder Sml, and build the micro-SML compiler as explained in README.TXT step
A to C.
Compile the micro-SML exampleex09.sml with all options,-opt,-verbose
and -eval, enabled. This provides the following result:
• A file ex09.out being the byte code for file ex09.sml.
• A lot of output on the console, including abstract syntax with tail call and type
information, the result of evaluating the program and the assembly byte code.

Output:

Program after alpha conversion (exercise): (Samme, grundet intet genbrug af variabler)
fun f x = if (x < 0) then g 4 else f (x - 1)
and g x = x
begin
  print(f 2)
end

Program with tailcalls:
fun f x = if (x < 0) then g_tail 4 else f_tail (x - 1)
and g x = x
begin
  print(f 2)
end

Program with types:
fun f x = if (x:int < 0:int):bool then g:(int -> int)_tail 4:int:int else f:(int -> int)_tail (x:int - 1:int):int:int
and g x = x:int
begin
  print(f:(int -> int) 2:int:int):int
end
Result type: int

Evaluating Program
4 
Result value: Result (Int 4)
Used: Elapsed 17ms, CPU 15ms
Compiled to ex09.out
LABEL G_ExnVar_L2
     0: CSTI 0
     2: CSTI 0
     4: STI
LABEL G_Valdecs_L3
     5: ACLOS 1
     7: ACLOS 1
     9: PUSHLAB LabFunc_f_L4
    11: CSTI 1
    13: LDI
    14: HEAPSTI 1
    16: INCSP -1
    18: PUSHLAB LabFunc_g_L5
    20: CSTI 2
    22: LDI
    23: HEAPSTI 1
    25: INCSP -1
    27: GETSP
    28: CSTI 2
    30: SUB
    31: CALL 0 L1
    34: STI
    35: INCSP -3
    37: STOP
LABEL LabFunc_f_L4
    38: GETBP
    39: CSTI 1
    41: ADD
    42: LDI
    43: CSTI 0
    45: LT
    46: IFZERO L6
    48: CSTI 2
    50: LDI
    51: CSTI 4
    53: TCLOSCALL 1
LABEL L6
    55: GETBP
    56: LDI
    57: GETBP
    58: CSTI 1
    60: ADD
    61: LDI
    62: CSTI 1
    64: SUB
    65: TCLOSCALL 1
LABEL LabFunc_g_L5
    67: GETBP
    68: CSTI 1
    70: ADD
    71: LDI
    72: RET 2
LABEL L1
    74: CSTI 1
    76: LDI
    77: CSTI 2
    79: CLOSCALL 1
    81: PRINTI
    82: RET 0



Now execute ex09.out with the bytecode machine, by running msmlmachine ex09.out
(./MsmlVM/src/msmlmachine ex09.out)

The result will be written to the console. Using the information above, answer the following:
1. What is the result value of running ex09.out?
Result value: 4

2. What type does the result value have? (Look at the result produced by the interpreter).
Result type: int

3. What application calls have been annotated as tail calls? Explain how this matches the intuition behind a tail call.

Both g_tail 4 and f_tail (x - 1) are tail calls.
That is because they are the last call in the respective branch of the function. There is no need to do anything after the call, so the stack can be reused.

fun f x = 
    if 
        (x < 0) then g_tail 4 
    else 
        f_tail (x - 1)


4. What type has been annotated for the call sites to the functions f and g? Function f is called in two places, and g in one place.

f:(int -> int) 2    //call in print
f:(int -> int)_tail //takes int and returns int
g:(int -> int)_tail //Takes int and returns the same int.


5. What is the running time for executing the example using the evaluator, and what is the running time using the byte code ex09.out using msmlmachine?

Evaluator: 15 cpu milli-seconds
using msmlachine: 0 cpu milli-seconds

The difference is, that the bytecode is already compiled, while the evaulator must first compile it, then run it.

6. Now compile the example ex09.sml without optimizations. How many byte code instructions did the optimization save for this small example?

Optimizations: 82
Without: 89
How many byte code instructions did the optimization save for this small example?: 7

Without optimizations:
Compiled to ex09.out
LABEL G_ExnVar_L2
     0: CSTI 0
     2: CSTI 0
     4: STI
LABEL G_Valdecs_L3
     5: ACLOS 1
     7: ACLOS 1
     9: PUSHLAB LabFunc_f_L4
    11: CSTI 1
    13: LDI
    14: HEAPSTI 1
    16: INCSP -1
    18: PUSHLAB LabFunc_g_L5
    20: CSTI 2
    22: LDI
    23: HEAPSTI 1
    25: INCSP -1
    27: GETSP
    28: CSTI 2
    30: SUB
    31: CALL 0 L1
    34: STI
    35: INCSP -3
    37: STOP
LABEL LabFunc_f_L4
    38: GETBP
    39: CSTI 1
    41: ADD
    42: LDI
    43: CSTI 0
    45: LT
    46: IFZERO L7
    48: CSTI 2
    50: LDI
    51: CSTI 4
    53: CLOSCALL 1
    55: GOTO L6
LABEL L7
    57: GETBP
    58: CSTI 0
    60: ADD
    61: LDI
    62: GETBP
    63: CSTI 1
    65: ADD
    66: LDI
    67: CSTI 1
    69: SUB
    70: CLOSCALL 1
LABEL L6
    72: RET 2
LABEL LabFunc_g_L5
    74: GETBP
    75: CSTI 1
    77: ADD
    78: LDI
    79: RET 2
LABEL L1
    81: CSTI 1
    83: LDI
    84: CSTI 2
    86: CLOSCALL 1
    88: PRINTI
    89: RET 0


Exercise 13.2 In this exercise we extend micro-SML with a pair expression (e1, e2).
We can create a pair, and we can access the first and second components of a pair p by fst(p) and snd(p).
The example program pair.sml shows a use of pairs where the pair’s first and second components are accessed.

val p = (1,43)
fun f p = if fst(p) < 0 then g p else f (fst(p)-1,snd(p))
and g p = (fst(p),snd(p)-1)
begin
 print (f p) // prints (-1,42)
end

The goal of this exercise is to implement lexing, parsing, type inference, interpretation
and compilation of pairs, and then to run the program. For instance, the type
annotated abstract syntax should be as follows:
Program with types:
val p = (1:int,43:int):(int * int)
fun f p =
    if (fst(p:(int * int)):int < 0:int):bool
        then g:((int * int) -> (int * int))_tail p:(int * int):(int * int)
        else f:((int * int) -> (int * int))_tail
            ((fst(p:(int * int)):int - 1:int):int,
            snd(p:(int * int)):int):(int * int):(int * int)
and g p = (fst(p:(int * int)):int,
            (snd(p:(int * int)):int - 1:int):int):(int * int)
begin
    print(f:((int * int) -> (int * int)) p:(int * int):(int * int)):(int * int)
end
Result type: (int * int)

The type of p is int * int. The type of f is int * int − > int * int. The
final result type is also a pair int * int.

Interpreting the program you get
Result value: Result (PairV (Int -1,Int 42))

You can use the following steps to implement support for pairs:
1. Write type rules for the primitives fst and snd, see Fig. 13.6.
2. Write evaluation rules for the primitives fst and snd, see Fig. 13.7.

3. FunLex.fsl: Extend with token COMMA and unary primitives snd and fst.
See funlex.fsl

4. FunPar.fsy: Extend with token COMMA and a rule for creating a pair. The concrete syntax is (e1, e2).
See FunPar.fsy

5. Absyn.fs: Extend the abstract syntax with a pair expression:
type expr<’a> =
...
| Pair of expr<’a> * expr<’a> * ’a option
...
Some compiler functions must also be extended to handle pair expressions:
ppProg, getOptExpr, tailcalls and freevars.

Done, see: ppProg, getOptExpr, tailcalls and freevars.

6. TypeInference.fs: Extend the typ type with the new pair type:
type typ =
...
| TypP of typ * typ
Some compiler functions must be extended: 
resolveType, freeTypeVars,
typeToString, unify, copyType, showType, typExpr (genbesøg "fst" og "snd" hvis det ikke virker). 
Type function typExpr must be extended with type inference for unary primitives fst, snd and then the pair construction Pair(e1, e2, _) expression.

Done. See mentioned files

7. HigherFun.fs: The interpreter must be able to handle pair values:
type value =
...
| PairV of value * value
Thus the following interpreter functions must be extended: ppValue, evalExpr and check.

Done. See mentioned files

8. msmlmachine.c: Two new byte code instructions are needed. One for creating
a pair, PAIR and one for printing a pair, PRINTP. To simplify matters you can
implement PRINTP assuming that pairs will always contain scalar values. This
is of course not always the case.
Instruction     Stack before    Stack after     Effect
42 PAIR s,      v1, v2             ⇒ s, p       Create pair cell (v1, v2) on heap
44 PRINTP       s, p               ⇒ s, p       Print pair value pointed at by p



9. ContComp.fs: The compiler must be extended to generate code for creating a
pair in the heap and for accessing the first and second component with fst and
snd respectively.
The primitives fst and snd are easily done using CAR and CDR in the bytecode.
A pair is created using the new byte code instruction PAIR.
The compiler function cExpr must be extended.

10. Machine.fs: The byte code instructions PRINTP and PAIR must be added. You
have to assign unique instruction codes to PRINTP and PAIR that match with
same instructions in msmlmachine.c.


• Exercise13.3: Implementalphaconversion(linkedfromlecture plan). (1point)