// Implementation file for parser generated by fsyacc
module FunPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "FunPar.fsy"

 (* File Fun/FunPar.fsy 
    Parser for micro-ML, a small functional language; one-argument functions.
    sestoft@itu.dk * 2009-10-19
  *)

 open Absyn;

# 15 "FunPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | DOT
  | BAR
  | ENUM
  | LBRACKET
  | RBRACKET
  | WITHIN
  | UNION
  | LBRACE
  | RBRACE
  | COMMA
  | PIPERIGHT
  | COMPOSERIGHT
  | RARROW
  | FUN
  | AND
  | OR
  | EOF
  | LPAR
  | RPAR
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | ELSE
  | END
  | FALSE
  | IF
  | IN
  | LET
  | NOT
  | THEN
  | TRUE
  | PRINT
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_DOT
    | TOKEN_BAR
    | TOKEN_ENUM
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_WITHIN
    | TOKEN_UNION
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_COMMA
    | TOKEN_PIPERIGHT
    | TOKEN_COMPOSERIGHT
    | TOKEN_RARROW
    | TOKEN_FUN
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_ELSE
    | TOKEN_END
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_NOT
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_PRINT
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_EnumList
    | NONTERM_EnumElement
    | NONTERM_SetExpr
    | NONTERM_Expr
    | NONTERM_AtExpr
    | NONTERM_AppExpr
    | NONTERM_Const

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | DOT  -> 0 
  | BAR  -> 1 
  | ENUM  -> 2 
  | LBRACKET  -> 3 
  | RBRACKET  -> 4 
  | WITHIN  -> 5 
  | UNION  -> 6 
  | LBRACE  -> 7 
  | RBRACE  -> 8 
  | COMMA  -> 9 
  | PIPERIGHT  -> 10 
  | COMPOSERIGHT  -> 11 
  | RARROW  -> 12 
  | FUN  -> 13 
  | AND  -> 14 
  | OR  -> 15 
  | EOF  -> 16 
  | LPAR  -> 17 
  | RPAR  -> 18 
  | EQ  -> 19 
  | NE  -> 20 
  | GT  -> 21 
  | LT  -> 22 
  | GE  -> 23 
  | LE  -> 24 
  | PLUS  -> 25 
  | MINUS  -> 26 
  | TIMES  -> 27 
  | DIV  -> 28 
  | MOD  -> 29 
  | ELSE  -> 30 
  | END  -> 31 
  | FALSE  -> 32 
  | IF  -> 33 
  | IN  -> 34 
  | LET  -> 35 
  | NOT  -> 36 
  | THEN  -> 37 
  | TRUE  -> 38 
  | PRINT  -> 39 
  | CSTBOOL _ -> 40 
  | NAME _ -> 41 
  | CSTINT _ -> 42 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_DOT 
  | 1 -> TOKEN_BAR 
  | 2 -> TOKEN_ENUM 
  | 3 -> TOKEN_LBRACKET 
  | 4 -> TOKEN_RBRACKET 
  | 5 -> TOKEN_WITHIN 
  | 6 -> TOKEN_UNION 
  | 7 -> TOKEN_LBRACE 
  | 8 -> TOKEN_RBRACE 
  | 9 -> TOKEN_COMMA 
  | 10 -> TOKEN_PIPERIGHT 
  | 11 -> TOKEN_COMPOSERIGHT 
  | 12 -> TOKEN_RARROW 
  | 13 -> TOKEN_FUN 
  | 14 -> TOKEN_AND 
  | 15 -> TOKEN_OR 
  | 16 -> TOKEN_EOF 
  | 17 -> TOKEN_LPAR 
  | 18 -> TOKEN_RPAR 
  | 19 -> TOKEN_EQ 
  | 20 -> TOKEN_NE 
  | 21 -> TOKEN_GT 
  | 22 -> TOKEN_LT 
  | 23 -> TOKEN_GE 
  | 24 -> TOKEN_LE 
  | 25 -> TOKEN_PLUS 
  | 26 -> TOKEN_MINUS 
  | 27 -> TOKEN_TIMES 
  | 28 -> TOKEN_DIV 
  | 29 -> TOKEN_MOD 
  | 30 -> TOKEN_ELSE 
  | 31 -> TOKEN_END 
  | 32 -> TOKEN_FALSE 
  | 33 -> TOKEN_IF 
  | 34 -> TOKEN_IN 
  | 35 -> TOKEN_LET 
  | 36 -> TOKEN_NOT 
  | 37 -> TOKEN_THEN 
  | 38 -> TOKEN_TRUE 
  | 39 -> TOKEN_PRINT 
  | 40 -> TOKEN_CSTBOOL 
  | 41 -> TOKEN_NAME 
  | 42 -> TOKEN_CSTINT 
  | 45 -> TOKEN_end_of_input
  | 43 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_EnumList 
    | 3 -> NONTERM_EnumList 
    | 4 -> NONTERM_EnumElement 
    | 5 -> NONTERM_EnumElement 
    | 6 -> NONTERM_SetExpr 
    | 7 -> NONTERM_SetExpr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_Expr 
    | 29 -> NONTERM_Expr 
    | 30 -> NONTERM_Expr 
    | 31 -> NONTERM_Expr 
    | 32 -> NONTERM_Expr 
    | 33 -> NONTERM_AtExpr 
    | 34 -> NONTERM_AtExpr 
    | 35 -> NONTERM_AtExpr 
    | 36 -> NONTERM_AtExpr 
    | 37 -> NONTERM_AtExpr 
    | 38 -> NONTERM_AtExpr 
    | 39 -> NONTERM_AppExpr 
    | 40 -> NONTERM_AppExpr 
    | 41 -> NONTERM_Const 
    | 42 -> NONTERM_Const 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 45 
let _fsyacc_tagOfErrorTerminal = 43

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | DOT  -> "DOT" 
  | BAR  -> "BAR" 
  | ENUM  -> "ENUM" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | WITHIN  -> "WITHIN" 
  | UNION  -> "UNION" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | COMMA  -> "COMMA" 
  | PIPERIGHT  -> "PIPERIGHT" 
  | COMPOSERIGHT  -> "COMPOSERIGHT" 
  | RARROW  -> "RARROW" 
  | FUN  -> "FUN" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | ELSE  -> "ELSE" 
  | END  -> "END" 
  | FALSE  -> "FALSE" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | NOT  -> "NOT" 
  | THEN  -> "THEN" 
  | TRUE  -> "TRUE" 
  | PRINT  -> "PRINT" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | DOT  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | ENUM  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | WITHIN  -> (null : System.Object) 
  | UNION  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | PIPERIGHT  -> (null : System.Object) 
  | COMPOSERIGHT  -> (null : System.Object) 
  | RARROW  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 92us; 93us; 2us; 65535us; 6us; 7us; 92us; 4us; 1us; 65535us; 68us; 9us; 33us; 65535us; 0us; 2us; 10us; 11us; 14us; 15us; 16us; 17us; 18us; 19us; 47us; 20us; 48us; 21us; 49us; 22us; 50us; 23us; 51us; 24us; 52us; 25us; 53us; 26us; 54us; 27us; 55us; 28us; 56us; 29us; 57us; 30us; 58us; 31us; 59us; 32us; 60us; 33us; 63us; 34us; 64us; 35us; 65us; 36us; 66us; 37us; 67us; 38us; 68us; 8us; 71us; 39us; 72us; 40us; 81us; 41us; 82us; 42us; 85us; 43us; 86us; 44us; 88us; 45us; 94us; 46us; 35us; 65535us; 0us; 12us; 10us; 12us; 12us; 96us; 13us; 97us; 14us; 12us; 16us; 12us; 18us; 12us; 47us; 12us; 48us; 12us; 49us; 12us; 50us; 12us; 51us; 12us; 52us; 12us; 53us; 12us; 54us; 12us; 55us; 12us; 56us; 12us; 57us; 12us; 58us; 12us; 59us; 12us; 60us; 12us; 63us; 12us; 64us; 12us; 65us; 12us; 66us; 12us; 67us; 12us; 68us; 12us; 71us; 12us; 72us; 12us; 81us; 12us; 82us; 12us; 85us; 12us; 86us; 12us; 88us; 12us; 94us; 12us; 33us; 65535us; 0us; 13us; 10us; 13us; 14us; 13us; 16us; 13us; 18us; 13us; 47us; 13us; 48us; 13us; 49us; 13us; 50us; 13us; 51us; 13us; 52us; 13us; 53us; 13us; 54us; 13us; 55us; 13us; 56us; 13us; 57us; 13us; 58us; 13us; 59us; 13us; 60us; 13us; 63us; 13us; 64us; 13us; 65us; 13us; 66us; 13us; 67us; 13us; 68us; 13us; 71us; 13us; 72us; 13us; 81us; 13us; 82us; 13us; 85us; 13us; 86us; 13us; 88us; 13us; 94us; 13us; 35us; 65535us; 0us; 77us; 10us; 77us; 12us; 77us; 13us; 77us; 14us; 77us; 16us; 77us; 18us; 77us; 47us; 77us; 48us; 77us; 49us; 77us; 50us; 77us; 51us; 77us; 52us; 77us; 53us; 77us; 54us; 77us; 55us; 77us; 56us; 77us; 57us; 77us; 58us; 77us; 59us; 77us; 60us; 77us; 63us; 77us; 64us; 77us; 65us; 77us; 66us; 77us; 67us; 77us; 68us; 77us; 71us; 77us; 72us; 77us; 81us; 77us; 82us; 77us; 85us; 77us; 86us; 77us; 88us; 77us; 94us; 77us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 10us; 44us; 80us; 114us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 18us; 1us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 1us; 1us; 1us; 3us; 2us; 4us; 5us; 1us; 5us; 1us; 5us; 18us; 6us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 2us; 7us; 30us; 1us; 7us; 18us; 7us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 2us; 8us; 39us; 2us; 9us; 40us; 1us; 10us; 18us; 10us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 1us; 10us; 18us; 10us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 1us; 10us; 18us; 10us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 23us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 24us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 26us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 27us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 28us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 29us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 31us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 35us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 35us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 36us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 36us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 37us; 18us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 31us; 38us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 2us; 32us; 34us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 34us; 2us; 35us; 36us; 2us; 35us; 36us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 23us; 25us; 27us; 30us; 32us; 34us; 53us; 56us; 58us; 77us; 80us; 83us; 85us; 104us; 106us; 125us; 127us; 146us; 165us; 184us; 203us; 222us; 241us; 260us; 279us; 298us; 317us; 336us; 355us; 374us; 393us; 412us; 431us; 450us; 469us; 488us; 507us; 526us; 545us; 564us; 583us; 602us; 621us; 640us; 659us; 661us; 663us; 665us; 667us; 669us; 671us; 673us; 675us; 677us; 679us; 681us; 683us; 685us; 687us; 689us; 691us; 693us; 695us; 697us; 699us; 701us; 703us; 705us; 707us; 709us; 711us; 713us; 716us; 718us; 720us; 722us; 724us; 727us; 730us; 732us; 734us; 736us; 738us; 740us; 742us; 744us; 746us; 748us; 750us; 752us; 754us; 756us; 758us; 760us; 762us; 764us; 766us; |]
let _fsyacc_action_rows = 100
let _fsyacc_actionTableElements = [|11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 0us; 49152us; 18us; 32768us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 16us; 3us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 0us; 16385us; 0us; 16387us; 1us; 16388us; 1us; 6us; 1us; 32768us; 41us; 5us; 0us; 16389us; 17us; 16390us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 2us; 32768us; 8us; 69us; 9us; 10us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 17us; 16391us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 6us; 16392us; 2us; 90us; 17us; 88us; 35us; 79us; 40us; 99us; 41us; 78us; 42us; 98us; 6us; 16393us; 2us; 90us; 17us; 88us; 35us; 79us; 40us; 99us; 41us; 78us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 18us; 32768us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 37us; 16us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 18us; 32768us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 30us; 18us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 17us; 16394us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 15us; 16395us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 15us; 16396us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 3us; 16397us; 27us; 52us; 28us; 53us; 29us; 54us; 3us; 16398us; 27us; 52us; 28us; 53us; 29us; 54us; 3us; 16399us; 27us; 52us; 28us; 53us; 29us; 54us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 11us; 16403us; 5us; 70us; 6us; 67us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 11us; 16404us; 5us; 70us; 6us; 67us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 6us; 16405us; 6us; 67us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 6us; 16406us; 6us; 67us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 6us; 16407us; 6us; 67us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 6us; 16408us; 6us; 67us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 15us; 16409us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 17us; 16410us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 11us; 16411us; 5us; 70us; 6us; 67us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 11us; 16412us; 5us; 70us; 6us; 67us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 3us; 16413us; 27us; 52us; 28us; 53us; 29us; 54us; 18us; 32768us; 5us; 70us; 6us; 67us; 9us; 72us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 18us; 32768us; 4us; 73us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 18us; 32768us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 34us; 82us; 18us; 32768us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 31us; 83us; 18us; 32768us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 34us; 86us; 18us; 32768us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 31us; 87us; 18us; 32768us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 18us; 89us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 18us; 32768us; 5us; 70us; 6us; 67us; 10us; 65us; 11us; 66us; 14us; 47us; 15us; 48us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 23us; 59us; 24us; 60us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 31us; 95us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 1us; 32768us; 41us; 62us; 1us; 32768us; 12us; 63us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 0us; 16414us; 1us; 32768us; 3us; 71us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 0us; 16415us; 1us; 16418us; 0us; 75us; 1us; 32768us; 41us; 76us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 1us; 32768us; 41us; 80us; 2us; 32768us; 19us; 81us; 41us; 84us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 0us; 16419us; 1us; 32768us; 19us; 85us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 0us; 16420us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 0us; 16421us; 1us; 32768us; 41us; 91us; 1us; 32768us; 19us; 92us; 1us; 16386us; 41us; 5us; 1us; 32768us; 34us; 94us; 11us; 32768us; 2us; 90us; 7us; 68us; 13us; 61us; 17us; 88us; 26us; 49us; 33us; 14us; 35us; 79us; 39us; 64us; 40us; 99us; 41us; 74us; 42us; 98us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 12us; 13us; 32us; 33us; 34us; 36us; 38us; 39us; 57us; 60us; 72us; 90us; 97us; 104us; 116us; 135us; 147us; 166us; 178us; 196us; 212us; 228us; 232us; 236us; 240us; 241us; 242us; 243us; 255us; 267us; 274us; 281us; 288us; 295us; 311us; 329us; 341us; 353us; 357us; 376us; 395us; 414us; 433us; 452us; 471us; 490us; 509us; 521us; 533us; 545us; 557us; 569us; 581us; 593us; 605us; 617us; 629us; 641us; 653us; 665us; 677us; 679us; 681us; 693us; 705us; 717us; 729us; 741us; 753us; 754us; 756us; 768us; 780us; 781us; 783us; 785us; 786us; 787us; 788us; 790us; 793us; 805us; 817us; 818us; 820us; 832us; 844us; 845us; 857us; 858us; 860us; 862us; 864us; 866us; 878us; 879us; 880us; 881us; 882us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 1us; 1us; 3us; 1us; 3us; 1us; 1us; 6us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 2us; 3us; 3us; 3us; 3us; 7us; 3us; 1us; 1us; 7us; 8us; 3us; 7us; 2us; 2us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16387us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 16417us; 16418us; 65535us; 65535us; 65535us; 65535us; 16419us; 65535us; 65535us; 65535us; 16420us; 65535us; 16421us; 65535us; 65535us; 65535us; 65535us; 65535us; 16422us; 16423us; 16424us; 16425us; 16426us; |]
let _fsyacc_reductions ()  =    [| 
# 372 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 381 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "FunPar.fsy"
                                                               _1 
                   )
# 45 "FunPar.fsy"
                 : Absyn.expr));
# 392 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "FunPar.fsy"
                                                               [] 
                   )
# 50 "FunPar.fsy"
                 : 'EnumList));
# 402 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'EnumElement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "FunPar.fsy"
                                                               _1 
                   )
# 51 "FunPar.fsy"
                 : 'EnumList));
# 413 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "FunPar.fsy"
                                                               [_1]     
                   )
# 55 "FunPar.fsy"
                 : 'EnumElement));
# 424 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'EnumElement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "FunPar.fsy"
                                                               _1 :: _3 
                   )
# 56 "FunPar.fsy"
                 : 'EnumElement));
# 436 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "FunPar.fsy"
                                                                [_1]                  
                   )
# 61 "FunPar.fsy"
                 : Absyn.expr list));
# 447 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "FunPar.fsy"
                                                                _1 @ [_3]             
                   )
# 62 "FunPar.fsy"
                 : Absyn.expr list));
# 459 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "FunPar.fsy"
                                                               _1                     
                   )
# 66 "FunPar.fsy"
                 : Absyn.expr));
# 470 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "FunPar.fsy"
                                                               _1                     
                   )
# 67 "FunPar.fsy"
                 : Absyn.expr));
# 481 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "FunPar.fsy"
                                                               If(_2, _4, _6)         
                   )
# 68 "FunPar.fsy"
                 : Absyn.expr));
# 494 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "FunPar.fsy"
                                                               If(_1, _3, CstB false) 
                   )
# 69 "FunPar.fsy"
                 : Absyn.expr));
# 506 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "FunPar.fsy"
                                                               If(_1, CstB true, _3)  
                   )
# 70 "FunPar.fsy"
                 : Absyn.expr));
# 518 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "FunPar.fsy"
                                                               Prim("-", CstI 0, _2)  
                   )
# 71 "FunPar.fsy"
                 : Absyn.expr));
# 529 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "FunPar.fsy"
                                                               Prim("+",  _1, _3)     
                   )
# 72 "FunPar.fsy"
                 : Absyn.expr));
# 541 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "FunPar.fsy"
                                                               Prim("-",  _1, _3)     
                   )
# 73 "FunPar.fsy"
                 : Absyn.expr));
# 553 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "FunPar.fsy"
                                                               Prim("*",  _1, _3)     
                   )
# 74 "FunPar.fsy"
                 : Absyn.expr));
# 565 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "FunPar.fsy"
                                                               Prim("/",  _1, _3)     
                   )
# 75 "FunPar.fsy"
                 : Absyn.expr));
# 577 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "FunPar.fsy"
                                                               Prim("%",  _1, _3)     
                   )
# 76 "FunPar.fsy"
                 : Absyn.expr));
# 589 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "FunPar.fsy"
                                                               Prim("=",  _1, _3)     
                   )
# 77 "FunPar.fsy"
                 : Absyn.expr));
# 601 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "FunPar.fsy"
                                                               Prim("<>", _1, _3)     
                   )
# 78 "FunPar.fsy"
                 : Absyn.expr));
# 613 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "FunPar.fsy"
                                                               Prim(">",  _1, _3)     
                   )
# 79 "FunPar.fsy"
                 : Absyn.expr));
# 625 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "FunPar.fsy"
                                                               Prim("<",  _1, _3)     
                   )
# 80 "FunPar.fsy"
                 : Absyn.expr));
# 637 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "FunPar.fsy"
                                                               Prim(">=", _1, _3)     
                   )
# 81 "FunPar.fsy"
                 : Absyn.expr));
# 649 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "FunPar.fsy"
                                                               Prim("<=", _1, _3)     
                   )
# 82 "FunPar.fsy"
                 : Absyn.expr));
# 661 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "FunPar.fsy"
                                                               Fun(_2, _4)            
                   )
# 83 "FunPar.fsy"
                 : Absyn.expr));
# 673 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "FunPar.fsy"
                                                               Print(_2)              
                   )
# 84 "FunPar.fsy"
                 : Absyn.expr));
# 684 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "FunPar.fsy"
                                                               Prim("|>", _1, _3)     
                   )
# 85 "FunPar.fsy"
                 : Absyn.expr));
# 696 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "FunPar.fsy"
                                                               Prim(">>", _1, _3)     
                   )
# 86 "FunPar.fsy"
                 : Absyn.expr));
# 708 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "FunPar.fsy"
                                                               Prim("++", _1, _3)     
                   )
# 87 "FunPar.fsy"
                 : Absyn.expr));
# 720 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "FunPar.fsy"
                                                               Set(_2)                
                   )
# 88 "FunPar.fsy"
                 : Absyn.expr));
# 731 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "FunPar.fsy"
                                                                          InCheck(_1, _4, _6)    
                   )
# 89 "FunPar.fsy"
                 : Absyn.expr));
# 744 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "FunPar.fsy"
                                                               EnumVal(_1, _3)       
                   )
# 90 "FunPar.fsy"
                 : Absyn.expr));
# 756 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "FunPar.fsy"
                                                               _1                     
                   )
# 94 "FunPar.fsy"
                 : Absyn.expr));
# 767 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "FunPar.fsy"
                                                               Var _1                 
                   )
# 95 "FunPar.fsy"
                 : Absyn.expr));
# 778 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "FunPar.fsy"
                                                               Let(_2, _4, _6)        
                   )
# 96 "FunPar.fsy"
                 : Absyn.expr));
# 791 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "FunPar.fsy"
                                                               Letfun(_2, _3, _5, _7) 
                   )
# 97 "FunPar.fsy"
                 : Absyn.expr));
# 805 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "FunPar.fsy"
                                                               _2                     
                   )
# 98 "FunPar.fsy"
                 : Absyn.expr));
# 816 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'EnumList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "FunPar.fsy"
                                                               Enum(_2, _4, _6)   
                   )
# 99 "FunPar.fsy"
                 : Absyn.expr));
# 829 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "FunPar.fsy"
                                                               Call(_1, _2)           
                   )
# 103 "FunPar.fsy"
                 : Absyn.expr));
# 841 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "FunPar.fsy"
                                                               Call(_1, _2)           
                   )
# 104 "FunPar.fsy"
                 : Absyn.expr));
# 853 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "FunPar.fsy"
                                                               CstI(_1)               
                   )
# 108 "FunPar.fsy"
                 : Absyn.expr));
# 864 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "FunPar.fsy"
                                                               CstB(_1)               
                   )
# 109 "FunPar.fsy"
                 : Absyn.expr));
|]
# 876 "FunPar.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 46;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
