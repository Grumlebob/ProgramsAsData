10.1

To understand how the abstract machine and the garbage collector
work and how they collaborate, answer these questions:

(i)
Write 3–10 line descriptions of how the abstract machine executes each of the
following instructions:
• ADD, which adds two integers.
• CSTI i, which pushes integer constant i.
• NIL, which pushes a nil reference. What is the difference between NIL and
CSTI 0?
• IFZERO, which tests whether an integer is zero, or a reference is nil.
• CONS
• CAR
• SETCAR

ADD: It takes the two topmost values on the stack, Untags them, adds the values together, 
     re-tags them and assigns the result to the top of the stack. Finally decreases the stack pointer.      //s[sp - 1] = Tag(Untag(s[sp - 1]) + Untag(s[sp])); sp--; break;
     
CSTI: It takes the given parameter (integer), tags it and places the value on top of the stack,     //s[sp + 1] = Tag(p[pc++]); sp++; break;
      then increases the stack pointer                                                              
      
NIL: Adds 0 to the top of the stack to represent nil, then increases the stack pointer  //s[sp + 1] = 0; sp++; break; 
     Differently from CSTI 0 it does not tag the value, meaning CSTI 0 would put 1 on the stack where nil puts 0.
         
IFZERO: Pops the topmost value (and decreases stack pointer) and saves it locally.      //word v = s[sp--];
        First check if the value is an integer.                                        //pc = (IsInt(v) ? Untag(v) == 0 : v == 0) ? p[pc] : pc + 1;
        If so return whether the untagged value is 0, else return if the value itself is zero.      
        If the returned boolean is true set program counter to the given parameter, otherwise increment it.
        
CONS:  Allocate 2 words of space on the heap with a header.                 //word* p = allocate(CONSTAG, 2, s, sp);
       Set the second topmost value on the stack to the first value (CAR).   //p[1] = (word)s[sp - 1];
       Set the topmost value on the stack to the second value (CDR).        //p[2] = (word)s[sp];
       Adds the cons pointer to the stack.                                  //s[sp - 1] = (word)p;
       Decrement stack pointer.                                             //sp--;
                                                
CAR:   Gets the topmost value from the stack as a pointer.                       //word* p = (word*)s[sp];
       If the value is 0 it is a NIL point which causes the program to return.   //if (p == 0) {
     	                                                                        //printf("Cannot take car of null\n"); return -1; }
       Otherwise get the word that was pointed to.                          //s[sp] = (word)(p[1]);
SETCAR: Takes the topmost value v on the stack and decrement the stack pointer.        //word v = (word)s[sp--];
        Then take the next element on the stack as a pointer and dereference the word. //word* p = (word*)s[sp];
        Set the first value in the word (CAR) to v.                                    //p[1] = v;
        
        
(ii) 
Describe the result of applying each C macro Length, Color and Paint from
Sect. 10.7.4 to a block header ttttttttnnnnnnnnnnnnnnnnnnnnnngg, that
is, a 32-bit word, as described in the source code comments.

Length(hdr)   (((hdr)>>2)&0x003FFFFF) //finds word size. Removes first two bits, then returns the next 22 bits (size)
Color(hdr)    ((hdr)&3) //returns the first two bits (color)
Paint(hdr, color)  (((hdr)&(~3))|(color)) // &~3 sets the color to 0. |color sets the new color value, while keeping remaining bits intact

(iii) When does the abstract machine, or more precisely, its instruction interpretation
loop, call the allocate(…) function? Is there any other interaction between the
abstract machine (also called the mutator) and the garbage collector?

It calls it when the developer make a CONS instruction.
One might do that when they have unpredictable life time of an object or want to store a big object on the heap. 
The collector looks through the objects created by the mutator and checks which to keep in a freelist. 

(iv) In what situation will the garbage collector’s collect(…) function be called?

When allocating, if no free block of proper size was found it will call collect to try and free up some space,
by sweeping unreferenced elements and maybe compressing.

10.2

Add a simple mark-sweep garbage collector to listmachine.c, like
this:
void collect(int s[], int sp) {
markPhase(s, sp);
sweepPhase();
}
Your markPhase function should scan the abstract machine stack s[0..sp] and
call an auxiliary function mark(word* block) on each non-nil heap reference in
the stack, to mark live blocks in the heap. Function mark(word* block) should
recursively mark everything reachable from the block.
The sweepPhase function should scan the entire heap, put white blocks on the
freelist, and paint black blocks white. It should ignore blue blocks; they are either
already on the freelist or they are orphan blocks which are neither used for data nor
on the freelist, because they consist only of a block header, so there is no way to link
them into the freelist.
This may sound complicated, but the complete solution takes less than 30 lines
of C code.
Running listmachine ex30.out 1000 should now work, also for arguments
that are much larger than 1000.

Remember that the listmachine has a tracing mode listmachine -trace
ex30.out 4 so you can see the stack state just before your garbage collector
crashes.
Also, calling the heapStatistics() function in listmachine.c performs
some checking of the heap’s consistency and reports some statistics on the
number of used and free blocks and so on. It may be informative to call it before and
after garbage collection, and between the mark and sweep phases.
When your garbage collector works, use it to run the list-C programs ex35.lc
and ex36.lc and check that they produce the expected output (described in their
source files). These programs build shared and cyclic data structures in the heap, and
this may reveal flaws in your garbage collector.

10.3

Improve the sweep phase so that it joins adjacent dead blocks into a
single dead block. More precisely, when sweep finds a white (dead) block of length
n at address p, it checks whether there is also a white block at address p + 1 + n,
and if so join them into one block.
Don’t forget to run the list-C programs ex35.lc and ex36.lc as in
Exercise 10.2.