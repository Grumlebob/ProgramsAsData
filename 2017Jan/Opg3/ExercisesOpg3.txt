1. I den abstrakte syntaks repræsenteres funktionen print med Print e, hvor e er et vilkårligt udtryk. Udvid
typen expr i Absyn.fs med Print således at eksempelvis Print(CstI 1) repræsenterer udtrykket
der printer konstanten 1 på skærmen og returnerer værdien 1.

Done, se Absyn.fs


2. Udvid lexer og parser, således at print er understøttet med syntaksen print e, hvor print er et nyt
nøgleord, se funktionen keyword i filen FunLex.fsl. Vis den abstrakte syntaks for følgende eksempler
ex1: print 1
> let ex1 = fromString "print 1";;
val ex1: Absyn.expr = Print (CstI 1)

ex2: print ((print 1) + 3)
> let ex2 = fromString "print ((print 1) + 3)";;
val ex2: Absyn.expr = Print (Prim ("+", Print (CstI 1), CstI 3))

ex3: let f x = x + 1 in print f end
> let ex3 = fromString "let f x = x + 1 in print f end";;
val ex3: Absyn.expr =
  Letfun ("f", "x", Prim ("+", Var "x", CstI 1), Print (Var "f"))

ex4: let f x = let g y = print 2 + y in g y end in f 4 end
> let ex4 = fromString "let f x = let g y = print 2 + y in g y end in f 4 end";;
val ex4: Absyn.expr =
  Letfun
    ("f", "x",
     Letfun
       ("g", "y", Print (Prim ("+", CstI 2, Var "y")), Call (Var "g", Var "y")),
     Call (Var "f", CstI 4))

ex5: let square x = x*x in print (square 10) end
> let ex5 = fromString "let square x = x*x in print (square 10) end";;          
val ex5: Absyn.expr =
  Letfun
    ("square", "x", Prim ("*", Var "x", Var "x"),
     Print (Call (Var "square", CstI 10)))
     
ex6:
> let ex6 = fromString "let f x = print 1 in f end";;
val ex6: Absyn.expr = Letfun ("f", "x", Print (CstI 1), Var "f")


3. Udvid funktionen eval i HigherFun.fs, med evaluering af Print e. 
Hvis v er værdien af at evaluere e, så er resultatet af Print e at udskrive v på skærmen samt returnere v.
Hint: Du kan anvende F#’s indbyggede printfn funktion med format streng "%A" til at udskrive værdierne
af type value i filen HigherFun.fs.
Eksempelvis giver resultatet af at evaluere eksempel ex3 ovenfor

> run(fromString "let f x = x + 1 in print f end");;
Closure ("f","x",Prim ("+",Var "x",CstI 1),[])
val it : HigherFun.value = Closure ("f","x",Prim ("+",Var "x",CstI 1),[])

Our result:
> run(fromString "let f x = x + 1 in print f end");;
Closure ("f", "x", Prim ("+", Var "x", CstI 1), [])
val it: HigherFun.value = Closure ("f", "x", Prim ("+", Var "x", CstI 1), [])
